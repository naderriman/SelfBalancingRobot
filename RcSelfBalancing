bool StartedTurning=false;
byte var=0;
double Turn=2.0;
int ad = 1;
const int MaxTurnSpeed = 5000;
double TurnRate = 0.0;
float  TotalSpeed1, TotalSpeed2;
bool MotorOFF1 = true , MotorOFF2 = true;
int pulseReq = 0;
volatile  int Nopulses = 0;
volatile unsigned int period = 1000;
double motorspeed = 1;
double kp = 1000.0;//1000 try to lower kp and raise kd
double ki = 30.0;//30.0; //5??
double kd = 5.0;//700.0; //100.0
double kpp = -1.0 / 6000.0; //11000  1.0/30000.0 ;//1.0/500;
double kdd = -1.0 / 500000.0; //1000
double kii = -1.0 / 1000000.0; //1.0/3000000.0;
double VelRef = 0.0;
float initialTime, current;
float lastLoopTime = 0;
double elapsedTime, previousTime;
float  loopStartTime = 0;
double cumErrorV , rateErrorV, cumErrorA, rateErrorA, lastErrorA, lastErrorV;

double PID (double pitch, double vel, double Vref) {
  float currentTime = millis();
  //get current time
  elapsedTime = (double)(currentTime - previousTime);        //compute time elapsed from previous computation
  double  errorV = Vref - vel;                                // determine error
  cumErrorV += errorV * elapsedTime;                // compute integral
  rateErrorV = (errorV - lastErrorV) / elapsedTime;

  double angle = kpp * errorV + kii * cumErrorV + kdd * rateErrorV;     //PID output

  lastErrorV = errorV;   //remember current error

  double   errorA = angle - pitch;
  rateErrorA = (errorA - lastErrorA) / elapsedTime;
  lastErrorA = errorA;
  cumErrorA += errorA * elapsedTime;
  double out = kp * errorA + ki * cumErrorA + kd * rateErrorA;
  previousTime = currentTime;                        //remember current time
  out = constrain(out, -20000, 20000);
  return out;

}


#include <Wire.h>
const int MPU = 0x68; // MPU6050 I2C address
float AccX, AccY, AccZ;
float GyroX, GyroY, GyroZ;
float accAngleX, accAngleY, gyroAngleX, gyroAngleY, gyroAngleZ;
float roll, pitch, yaw;
float AccErrorX, AccErrorY, GyroErrorX, GyroErrorY, GyroErrorZ;
unsigned long currentTime, previosTime;
double elapseTime;
float deltaTime = 0;


#define xstep 2
#define xdir 5
#define ydir 6
#define en 8
#define ystep 3
void setup() {
   
  pinMode(xstep, OUTPUT);
  pinMode(xdir, OUTPUT);
  pinMode(ystep, OUTPUT);
  pinMode(ydir, OUTPUT);
  pinMode(en, OUTPUT);


  digitalWrite(xstep, LOW);
  digitalWrite(ystep, LOW);
  digitalWrite(xdir, HIGH);
  digitalWrite(ydir, LOW);
  digitalWrite(en, HIGH);
  noInterrupts();
  TCCR1A = 0;
  TCCR1B = (1 << WGM12) | (1 << CS11);//64 prescale
  OCR1A = 2800; //16Mhz=0.0625 64*0.0625=4us period= 100us/4us=25
  TCNT1 = 0;
  TIMSK1 |= (1 << OCIE1A);

  TCCR4A = 0;                             // Timer1 CTC mode 4, OCxA,B outputs disconnected
  TCCR4B = (1 << WGM12) | (1 << CS11);    // Prescaler=8, => 2Mhz
  OCR4A = 6000;                          // longest period, motor stopped
  TCNT4 = 0;
  TIMSK4 |= (1 << OCIE4A);
  interrupts();


  Wire.begin();                      // Initialize comunication
  Wire.beginTransmission(MPU);       // Start communication with MPU6050 // MPU=0x68
  Wire.write(0x6B);                  // Talk to the register 6B
  Wire.write(0x00);                  // Make reset - place a 0 into the 6B register
  Wire.endTransmission(true);        //end the transmission
//  Wire.onReceive(receiveEvent);
  Serial.begin(115200);
  delay(20);
  
  digitalWrite(en, LOW);
  pulseReq = 5000; //0.26mm/pulse if a certain distrance traveled is required.
}

void delay_05us()
{
  __asm__ __volatile__ (
    "nop" "\n\t"    "nop" "\n\t"    "nop" "\n\t"    "nop" "\n\t"
    "nop" "\n\t"    "nop" "\n\t"    "nop" "\n\t"    "nop");
}


/* Code below is for timer interrupts responsible for controlling both stepper motors. 
 *  (2 timers are required so the robot can steer *  
 *  
 *  
 *  
 */
ISR(TIMER1_COMPA_vect) {
  TCNT1 = 0;
  if (MotorOFF1 || abs(pitch) > 30 ) {
    return;
  }


  digitalWrite(xstep, HIGH);

  delay_05us();

  delay_05us();
  Nopulses = Nopulses + ad; // in order to travel a certain distance (if required)
  digitalWrite(xstep, LOW);

}
ISR(TIMER4_COMPA_vect)
{
  TCNT4 = 0;
  if (MotorOFF2 || abs(pitch) > 30 ) {
    return;
  }
  digitalWrite(ystep, HIGH);

  delay_05us();
  delay_05us();
  digitalWrite(ystep, LOW);

}



void loop() {

  // === Read acceleromter data === //


//noInterrupts();
  Wire.beginTransmission(MPU);

  Wire.write(0x3B); // Start with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true); // Read 6 registers total, each axis value is stored in 2 registers

  //For a range of +-2g, we need to divide the raw values by 16384, according to the datasheet
  AccX = (Wire.read() << 8 | Wire.read()) / (16384.0 / 2.0); // X-axis value
  AccY = (Wire.read() << 8 | Wire.read()) / (16384.0 / 2.0); // Y-axis value
  AccZ = (Wire.read() << 8 | Wire.read()) / (16384.0 / 2.0); // Z-axis value

  // Calculating Roll and Pitch from the accelerometer data
  accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / PI)  - 0.1; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) - 0.149; // AccErrorY ~(-1.58)
  // === Read gyroscope data === //
  // Current time actual time read
  // Divide by 1000 to get seconds
  
  Wire.beginTransmission(MPU);

  Wire.write(0x43); // Gyro data first register address 0x43
  Wire.endTransmission(false);

  Wire.requestFrom(MPU, 6, true);
  
  // Read 4 registers total, each axis value is stored in 2 registers
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0; // For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
  
  // Correct the outputs with the calculated error values
  //  GyroX = GyroX -0.6; // GyroErrorX ~(-0.56)
  GyroY = GyroY + 0.9; // GyroErrorY ~(1.08)
  //  GyroZ = GyroZ +0.1984; // GyroErrorZ ~ (-0.8)
  // Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
  //  gyroAngleX = gyroAngleX + GyroX * elapsedTime; // deg/s * s = deg
  gyroAngleY = gyroAngleY + GyroY * deltaTime;
 
  
  //  yaw =  yaw + GyroZ * elapsedTime;
  // Complementary filter - combine acceleromter and gyro angle values
  //  roll = 0.5 * gyroAngleX + 0.5 * accAngleX;
  pitch = 0.98 * gyroAngleY + 0.02 * accAngleY;
  
//  pulseReq - Nopulses > 1
  if (  var==5) {
    VelRef = -6000;
//    pulseReq=4000;
    TurnRate=0;
    
  }

//  pulseReq - Nopulses > 1 &&
  else if( var==0){
    VelRef = -3000;
    TurnRate=-(Turn-2.0)*0.3;
//    Serial.println(Turn);
//    pulseReq=2000;
  }
  else {
//    Nopulses = 0;
    VelRef = 0;
    TurnRate=0;
    StartedTurning=true;
    initialTime = millis();
    
    
//    Serial.println(Turn);
  }
  current = millis();
if (StartedTurning==true && current-initialTime<500){
  TurnRate=-(Turn-2.0)*0.5;
}
else if (StartedTurning==true){
  TurnRate=0;
  StartedTurning=false;
}
  motorspeed = PID (pitch, motorspeed, VelRef);

  // Spin the stepper motor 1 revolution slowl
  if (abs(motorspeed) < 700) {
    motorspeed = 0;
  }

  TotalSpeed1 = motorspeed + TurnRate * MaxTurnSpeed;
  TotalSpeed2 = motorspeed - TurnRate * MaxTurnSpeed;
  period = 20000000.0 / abs(TotalSpeed1) ;
  OCR1A = period - 1;
  period = 20000000.0 / abs(TotalSpeed2) ;
  OCR4A = period - 1;
  Serial.println(pitch);
  MotorOFF2 = false;
  MotorOFF1 = false;

  if (TotalSpeed1 < -350) {
    digitalWrite(xdir, LOW);
    ad = 1;// for counting steps (distance request)
  }
  else if (TotalSpeed1 > 350) {
    digitalWrite(xdir, HIGH);
    ad = -1;
  }
  else {
    MotorOFF1 = true;
    OCR1A = 65534;

  }

  if (TotalSpeed2 < -350) {
    digitalWrite(ydir, HIGH);
  }
  else if (TotalSpeed2 > 350) {
    digitalWrite(ydir, LOW);
  }
  else {
    MotorOFF2 = true;
    OCR4A = 65534;
  }

  if (TCNT1 > OCR1A)    // Check  if we need to reset the timer...
    TCNT1 = 0;
  if (TCNT4 > OCR4A)    // Check  if we need to reset the timer...
    TCNT4 = 0;


   Wire.beginTransmission(9); //begin communication with arduino uno (in this case acting as a slave)

  Wire.endTransmission();  
  
  delay(10);
  Wire.requestFrom(9, 2,true);
  if (Wire.available ())
    {
    var=Wire.read();
  Turn=Wire.read();
//  Serial.println(var);
    } 

  

 lastLoopTime = micros() - loopStartTime;
  deltaTime = (float)lastLoopTime / (float)1000000;
  loopStartTime = micros();

}
